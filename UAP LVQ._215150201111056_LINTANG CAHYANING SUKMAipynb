{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1hjGEQocxXu3IFc-Y6WryGRuuulhTE6aw","timestamp":1701592321612}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"YQf4eeDGdbfB","executionInfo":{"status":"ok","timestamp":1701592988119,"user_tz":-420,"elapsed":556,"user":{"displayName":"LINTANG CAHYANING SUKMA","userId":"18146314551537415829"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","np.set_printoptions(threshold=np.inf)"]},{"cell_type":"markdown","source":["# LVQ"],"metadata":{"id":"TbfIMB6adqXR"}},{"cell_type":"markdown","source":["Tugas Praktikan adalah melakukan modifikasi kode untuk algoritma lain dari LVQ yaitu LVQ2 dan LVQ2.1.\n","\n","\n"],"metadata":{"id":"pvYC-HWMdvh6"}},{"cell_type":"markdown","source":["## Kode"],"metadata":{"id":"mdgaLrhyzL4Z"}},{"cell_type":"markdown","source":["LVQ"],"metadata":{"id":"gWjcCA1rgv4j"}},{"cell_type":"code","source":["#Tidak perlu diubah\n","def lvq_fit(train, target, lrate, b, max_epoch):\n","  label, train_idx = np.unique(target, return_index=True)\n","  weight = train[train_idx].astype(np.float64)\n","  train = np.array([e for i, e in enumerate(zip(train, target)) if i not in train_idx])\n","  train, target = train[:, 0], train[:, 1]\n","  epoch = 0\n","\n","  while epoch < max_epoch:\n","    for i, x in enumerate(train):\n","      distance = [sum((w - x) ** 2) for w in weight]\n","      min = np.argmin(distance)\n","      sign = 1 if target[i] == label[min] else -1\n","      weight[min] += sign * lrate * (x - weight[min])\n","    lrate *= b\n","    epoch += 1\n","\n","  return weight, label"],"metadata":{"id":"uJd9QitnduXS","executionInfo":{"status":"ok","timestamp":1701592988120,"user_tz":-420,"elapsed":5,"user":{"displayName":"LINTANG CAHYANING SUKMA","userId":"18146314551537415829"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["LVQ2"],"metadata":{"id":"ESx75_b4gxhA"}},{"cell_type":"code","source":["def lvq2_fit(train, target, lrate, b, max_epoch, epsilon):\n","  label, train_idx = np.unique(target, return_index=True)\n","  weight = train[train_idx].astype(np.float64)\n","  train = np.array([e for i, e in enumerate(zip(train, target)) if i not in train_idx])\n","  train, target = train[:, 0], train[:, 1]\n","  epoch = 0\n","\n","  while epoch < max_epoch:\n","    for i, x in enumerate(train):\n","      distance = [sum((w - x) ** 2) for w in weight]\n","      distance = np.array(distance)\n","      min_indices = np.argpartition(distance,1)[:2]\n","      min_values = distance[min_indices]\n","      sorted_min_indices = min_indices[np.argsort(min_values)]\n","      c = sorted_min_indices[0] #Terdekat\n","      r = sorted_min_indices[1] #Kedua Terdekat\n","      #Buat kode perubahan bobot untuk LVQ2\n","      if target[i] == label[c]:\n","        weight[c] += lrate * (x - weight[c])\n","      elif target[i] != label[c] and target[i] == label[r]:\n","\n","      #pengecekan rasio jarak terdekat dengan jarak kedua terdekat terhadap epsilon\n","        #pengecekan bahwa label terdekat tidak sama dengan target\n","        if distance[c] / distance[r] > (1 - epsilon) / (1 + epsilon):\n","          #pengecekan bahwa label kedua terdekat bernilai sama dengan target\n","          if target[i] != label[c] and target[i] != label[r]:\n","            #Update bobot untuk kelas terdekat dan kedua terdekat\n","            weight[c] -= lrate * (x - weight[c])\n","            weight[r] += lrate * (x - weight[r])\n","\n","\n","\n","    lrate *= b\n","    epoch += 1\n","\n","  return weight, label"],"metadata":{"id":"a5_W1dubg09A","executionInfo":{"status":"ok","timestamp":1701595553281,"user_tz":-420,"elapsed":370,"user":{"displayName":"LINTANG CAHYANING SUKMA","userId":"18146314551537415829"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["LVQ2.1"],"metadata":{"id":"JOnLxeOGgyjD"}},{"cell_type":"code","source":["def lvq21_fit(train, target, lrate, b, max_epoch, epsilon):\n","  label, train_idx = np.unique(target, return_index=True)\n","  weight = train[train_idx].astype(np.float64)\n","  train = np.array([e for i, e in enumerate(zip(train, target)) if i not in train_idx])\n","  train, target = train[:, 0], train[:, 1]\n","  epoch = 0\n","\n","  while epoch < max_epoch:\n","    for i, x in enumerate(train):\n","      distance = [sum((w - x) ** 2) for w in weight]\n","      distance = np.array(distance)\n","      min_indices = np.argpartition(distance,1)[:2]\n","      min_values = distance[min_indices]\n","      sorted_min_indices = min_indices[np.argsort(min_values)]\n","      c1 = sorted_min_indices[0] #Terdekat\n","      c2 = sorted_min_indices[1] #Kedua Terdekat\n","      #Buat kode perubahan bobot untuk LVQ2\n","\n","      #pengecekan rasio jarak terdekat dengan jarak kedua terdekat terhadap epsilon\n","      if (distance[c1]/distance[c2] > (1-epsilon)/(1+epsilon)):\n","        #pengecekan bahwa label terdekat sama dengan target\n","        if (target[i] == label[c1]):\n","          #Update bobot untuk kelas terdekat dan kedua terdekat\n","          weight[c1] += lrate * (x - weight[c1])\n","          weight[c2] += lrate * (x - weight[c2])\n","\n","\n","\n","        #pengecekan bahwa label kedua terdekat sama dengan target\n","        elif (target[i] == label[c2]):\n","\n","          #Update bobot untuk kelas terdekat dan kedua terdekat\n","          weight[c1] -= lrate * (x - weight[c1])\n","          weight[c2] -= lrate * (x - weight[c2])\n","\n","\n","\n","    lrate *= b\n","    epoch += 1\n","\n","  return weight, label"],"metadata":{"id":"iM-m475Ig1Vo","executionInfo":{"status":"ok","timestamp":1701595774874,"user_tz":-420,"elapsed":347,"user":{"displayName":"LINTANG CAHYANING SUKMA","userId":"18146314551537415829"}}},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":["Fungsi Testing dan Hitung Akurasi\n"],"metadata":{"id":"5i_KcOlcvXKN"}},{"cell_type":"code","source":["#Tidak perlu diubah\n","def lvq_predict(X, model):\n","  center, label = model\n","  Y = []\n","  for x in X:\n","    d = [sum((c - x) ** 2) for c in center]\n","    Y.append(label[np.argmin(d)])\n","  return Y\n","\n","def calc_accuracy(a, b):\n","  s = [1 if a[i] == b[i] else 0 for i in range(len(a))]\n","  return sum(s) / len(a)"],"metadata":{"id":"93PbV6CJvWuR","executionInfo":{"status":"ok","timestamp":1701593368942,"user_tz":-420,"elapsed":363,"user":{"displayName":"LINTANG CAHYANING SUKMA","userId":"18146314551537415829"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["## Percobaan"],"metadata":{"id":"c8gyFSiUu6Uy"}},{"cell_type":"markdown","source":["Lakukan training LVQ dengan\n","- learning rate 0.5\n","- perubahan learning rate 0.8\n","- epoch maksimum 100\n","- epsilon 0.3"],"metadata":{"id":"AVEYajPxzYms"}},{"cell_type":"code","source":["from random import uniform\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.datasets import make_blobs, make_classification\n","\n","X, y = make_classification(n_samples=100, n_features=2, n_redundant=0, n_informative=2, n_classes=4, n_clusters_per_class=1)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n","\n","model = lvq_fit(X_train, y_train, lrate=0.5, b=0.5, max_epoch=100)\n","output = lvq_predict(X_test, model)\n","accuracy = calc_accuracy(output, y_test)\n","colors = 'rgbcmyk'\n","\n","print('Accuracy:', accuracy)\n","for x, label in zip(X_train, y_train):\n","  plt.plot(x[0], x[1], colors[label] + '.')\n","for center, label in zip(model[0], model[1]):\n","  plt.plot(center[0], center[1], colors[label] + 'o')\n","for x, label in zip(X_test, output):\n","  plt.plot(x[0], x[1], colors[label] + 'x')"],"metadata":{"id":"YbUupNjNvAh8","colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1701593664443,"user_tz":-420,"elapsed":1120,"user":{"displayName":"LINTANG CAHYANING SUKMA","userId":"18146314551537415829"}},"outputId":"eeecbf98-80ab-45e6-df3e-e81ffae8f190"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-2-51f39131c946>:5: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  train = np.array([e for i, e in enumerate(zip(train, target)) if i not in train_idx])\n"]},{"output_type":"stream","name":"stdout","text":["Accuracy: 0.85\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["model = lvq2_fit(X_train, y_train, lrate=0.8, b=0.5, max_epoch=100, epsilon=0.3)\n","output = lvq_predict(X_test, model)\n","accuracy = calc_accuracy(output, y_test)\n","colors = 'rgbcmyk'\n","\n","print('Accuracy:', accuracy)\n","for x, label in zip(X_train, y_train):\n","  plt.plot(x[0], x[1], colors[label] + '.')\n","for center, label in zip(model[0], model[1]):\n","  plt.plot(center[0], center[1], colors[label] + 'o')\n","for x, label in zip(X_test, output):\n","  plt.plot(x[0], x[1], colors[label] + 'x')"],"metadata":{"id":"tYTI20cJvOdG","colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1701595586519,"user_tz":-420,"elapsed":1108,"user":{"displayName":"LINTANG CAHYANING SUKMA","userId":"18146314551537415829"}},"outputId":"033fed2a-0952-4c8a-ea13-bac0d020d966"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-23-040e63c98491>:4: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  train = np.array([e for i, e in enumerate(zip(train, target)) if i not in train_idx])\n"]},{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["model = lvq21_fit(X_train, y_train, lrate=0.8, b=0.5, max_epoch=100, epsilon=0.3)\n","output = lvq_predict(X_test, model)\n","accuracy = calc_accuracy(output, y_test)\n","colors = 'rgbcmyk'\n","\n","print('Accuracy:', accuracy)\n","for x, label in zip(X_train, y_train):\n","  plt.plot(x[0], x[1], colors[label] + '.')\n","for center, label in zip(model[0], model[1]):\n","  plt.plot(center[0], center[1], colors[label] + 'o')\n","for x, label in zip(X_test, output):\n","  plt.plot(x[0], x[1], colors[label] + 'x')"],"metadata":{"id":"VdVfUgYWvSYf","colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1701595781470,"user_tz":-420,"elapsed":948,"user":{"displayName":"LINTANG CAHYANING SUKMA","userId":"18146314551537415829"}},"outputId":"7b81bc64-bf43-46ea-fa28-117c331e6f59"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-27-13b331dd8d14>:4: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  train = np.array([e for i, e in enumerate(zip(train, target)) if i not in train_idx])\n"]},{"output_type":"stream","name":"stdout","text":["Accuracy: 0.15\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Analisis\n","\n","Jelaskan hasil yang anda dapatkan!"],"metadata":{"id":"qP8VizXtwrvH"}},{"cell_type":"markdown","source":["jawab disini"],"metadata":{"id":"JLEj0Fgqwx1K"}}]}